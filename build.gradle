buildscript {
    repositories {
        maven {
            name = "aliyun"
            url "https://maven.aliyun.com/repository/public/"
        }
        maven { url = "https://cyankoton.github.io/maven" }
        mavenCentral()
        maven {
            name = "forge"
            //url = "https://files.minecraftforge.net/maven"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath("io.github.cyankoton:ForgeGradle:1.2-1.0.8") {
            changing = true
        }
    }
}

plugins {
    id 'java-library'    // JAVA 依赖库
}

apply plugin: 'forge'


sourceCompatibility = targetCompatibility = '1.8'
mirrorstation {
    // cyankoton
    mcJsonUrl = "https://s3.amazonaws.com/Minecraft.Download/versions/{MC_VERSION}/{MC_VERSION}.json"
    mcJarUrl = "https://cyankoton.github.io/maven/minecraft/versions/{MC_VERSION}/{MC_VERSION}.jar"
    mcServerUrl = "https://cyankoton.github.io/maven/minecraft/versions/{MC_VERSION}/minecraft_server.{MC_VERSION}.jar"
    mcpUrl = "https://files.minecraftforge.net/fernflower-fix-1.0.zip"
    assetsUrl = "https://resources.download.minecraft.net"
    libraryUrl = "https://libraries.minecraft.net/"
    assetsIndexUrl = "https://s3.amazonaws.com/Minecraft.Download/indexes/{ASSET_INDEX}.json"
    forgeMavenUrl = "https://maven.minecraftforge.net"
    // mirror
    mirrorMavenUrl = "https://cyankoton.github.io/maven"
    aliyunMavenUrl = "https://maven.aliyun.com/repository/public"
    mavenMavenUrl = "https://repo1.maven.org/maven2"
}

version = "0.1.5"
group = "Ventivu.AgriCraftY"
archivesBaseName = "AgriCraftY"

// Setup forge.
minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
    // mappings = "stable_12"
}

// Configure dependencies (build-only, shaded and packed libraries)
def clientmode = true
def uselib = true
def coreLocation = "../MagCore/build/libs/%s"
def env = String.format(coreLocation, clientmode ? "MagCore-0.4.3.jar" : "MagCoreDev.jar")
dependencies {
    implementation 'org.jetbrains:annotations-java5:20.1.0'
    implementation fileTree("Mods")
    compileOnly fileTree("DepMods")
    implementation files(String.format(coreLocation, "MagCoreDev-source.jar"))
    if (uselib) implementation files(env)
    else compileOnly files(env)
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    filesMatching('mcmod.info') {
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
}
// http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Compile the jar for the APIs
task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'com/InfinityRaider/AgriCraft/api/**/*'
    classifier = 'api'
}

//Compile sources jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

//Compile deobf jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives sourceJar
    archives apiJar
    archives deobfJar
}

// Javadoc
task mainAgriCraftJavadoc(type: Javadoc) {
  source = sourceSets.main.allJava
    title = "AgriCraft $version Documentation"
  destinationDir = file("${project.docsDir}/mainJavadoc")
  failOnError = false
}

task apiAgriCraftJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    include "**/api/**"
    title = "AgriCraft $version API Documentation"
    destinationDir = file("${project.docsDir}/apiJavadoc")
    failOnError = false
}

runClient {
    args("--username", "Ventivu")
}
